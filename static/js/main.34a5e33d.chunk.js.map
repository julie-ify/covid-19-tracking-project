{"version":3,"sources":["API/GetCountriesData.js","redux/countries/Countries.js","API/GetCountryData.js","redux/country/country.js","redux/ConfigureStore.js","components/CountryHeader.js","components/Header.js","components/SelectCountry.js","components/Main.js","components/CountryDetails.js","App.js","reportWebVitals.js","index.js"],"names":["dateFunc","day","Date","toLocaleDateString","split","reverse","b","splice","join","push","getCountriesData","a","todayDate","fetch","response","json","dataResult","GET_COUNTRIES","initialState","reducer","state","action","type","countries","payload","getCountryData","id","GET_COUNTRY","country","combineReducers","countriesReducer","countryReducer","store","createStore","applyMiddleware","logger","thunk","CountryHeader","props","region","totalConfirmedCases","totalCases","map","item","today_confirmed","addTotalCases","reduce","initial","element","className","icon","faGlobeEurope","defaultProps","Header","countryName","to","exact","faAngleLeft","faMicrophoneAlt","faCog","SelectCountry","cardNumber","faArrowCircleRight","name","PropTypes","shape","Main","useSelector","useState","searchBar","setSearchBar","placeholder","value","onChange","e","target","filter","toLowerCase","includes","toLocaleLowerCase","CountryDetails","searchValue","setSearchValue","dispatch","useDispatch","useParams","useEffect","result","data","dataArray","Object","values","dates","countryData","today_deaths","regions","length","App","countriesData","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"8SAAaA,EAAW,WACtB,IAEMC,GAFO,IAAIC,MACFC,qBACDC,MAAM,KAAKC,UACnBC,EAAIL,EAAIM,OAAO,EAAG,GAAGC,KAAK,IAGhC,OAFAP,EAAIQ,KAAKH,GAEFL,EAAIO,KAAK,MAYHE,EATO,uCAAG,gCAAAC,EAAA,6DACjBC,EAAYZ,IADK,SAEAa,MAAM,iDAAD,OACuBD,IAH5B,cAEjBE,EAFiB,gBAKEA,EAASC,OALX,cAKjBC,EALiB,yBAMhBA,GANgB,2CAAH,qDCRhBC,EAAgB,oDAEhBC,EAAe,GAiCNC,EAZC,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAChD,OAAQA,EAAOC,MACb,KAAKL,EACH,OAAO,2BACFG,GADL,IAEEG,UAAWF,EAAOG,UAEtB,QACE,OAAOJ,IChCApB,EAAW,WACtB,IAEMC,GAFO,IAAIC,MACFC,qBACDC,MAAM,KAAKC,UACnBC,EAAIL,EAAIM,OAAO,EAAG,GAAGC,KAAK,IAGhC,OAFAP,EAAIQ,KAAKH,GAEFL,EAAIO,KAAK,MAWHiB,EARK,uCAAG,WAAOC,GAAP,iBAAAf,EAAA,6DACfC,EAAYZ,IADG,SAEEa,MAAM,iDAAD,OACuBD,EADvB,oBAC4Cc,IAHnD,cAEfZ,EAFe,yBAKdA,EAASC,QALK,2CAAH,sDCTdY,EAAc,gDAEdT,EAAe,GAmCNC,EAZC,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAChD,OAAQA,EAAOC,MACb,KAAKK,EACH,OAAO,2BACFP,GADL,IAEEQ,QAASP,EAAOG,UAEpB,QACE,OAAOJ,IC7BPD,EAAUU,YAAgB,CAC9BC,mBACAC,mBAKaC,EAFDC,YAAYd,EAASe,YAAgBC,IAAQC,M,+BCNrDC,EAAgB,SAACC,GAAW,IACxBC,EAAWD,EAAXC,OAEJC,EAAsB,EACpBC,EAAaF,GACdA,EAAOG,KAAI,SAACC,GAIb,OAHIA,EAAKC,kBACPJ,GAAuBG,EAAKC,iBAEvBJ,KAGLK,EAAgBJ,GACjBA,EAAWK,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GAEhE,OACE,sBAAKC,UAAU,gBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,cAAC,IAAD,CAAiBC,KAAMC,IAAeF,UAAU,eAElD,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,aAAf,UACE,mBAAGA,UAAU,aAAb,+CACA,iCACGJ,EACA,IAFH,8BAeVR,EAAce,aAAe,CAC3Bb,OAAQ,IAGKF,QCrCTgB,EAAS,SAACf,GAAW,IACjBgB,EAAgBhB,EAAhBgB,YAER,OACE,wBAAQL,UAAU,YAAlB,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,cAAf,UACE,cAAC,IAAD,CAAMM,GAAG,IAAIC,MAAK,WAAK,GAAQP,UAAU,aAAzC,SACE,cAAC,IAAD,CAAiBC,KAAMO,IAAaR,UAAU,kBAEhD,2CAEF,gCACGK,GAAe,+BAAOA,KACrBA,GAAe,yDAEnB,sBAAKL,UAAU,cAAf,UACE,cAAC,IAAD,CAAiBC,KAAMQ,MACvB,cAAC,IAAD,CAAiBR,KAAMS,eAWjCN,EAAOD,aAAe,CACpBE,YAAa,IAEAD,Q,OCjCTO,EAAgB,SAACtB,GAAW,IACxBV,EAAwBU,EAAxBV,QAASiC,EAAevB,EAAfuB,WACjB,OACE,qBACEZ,UACiB,IAAfY,GAAmC,IAAfA,EAAmB,cAAgB,YAF3D,SAKE,sBAAKZ,UAAU,aAAf,UACE,cAAC,IAAD,CAAiBC,KAAMC,IAAeF,UAAU,QAChD,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAMM,GAAE,UAAK3B,EAAQF,IAAMuB,UAAU,aAArC,SACE,cAAC,IAAD,CAAiBC,KAAMY,QAEzB,sBAAKb,UAAU,cAAf,UACE,qBAAKA,UAAU,aAAf,SAA6BrB,EAAQmC,OACrC,gCACGnC,EAAQgB,gBACR,IAFH,uBAqBZgB,EAAcR,aAAe,CAC3BxB,Q,OAASoC,EAAUC,MAAM,CACvBvC,GAAI,KAENmC,WAAY,GAGCD,QCEAM,EAjDF,WACX,IAAIL,EAAa,EACXtC,EAAY4C,aAAY,SAAC/C,GAAD,OAAWA,EAAMU,iBAAiBP,aAF/C,EAGiB6C,mBAAS,IAH1B,mBAGVC,EAHU,KAGCC,EAHD,KASjB,OACE,sBAAKrB,UAAU,UAAf,UACE,cAAC,EAAD,IACA,gCACE,cAAC,EAAD,CAAeV,OAAQhB,IACvB,sBAAK0B,UAAU,gBAAf,UACE,qBAAKA,UAAU,YAAf,qCACA,uBAAOsB,YAAY,YAAYtB,UAAU,YAAYuB,MAAOH,EAAWI,SAX1D,SAACC,GACpBJ,GAAa,kBAAMI,EAAEC,OAAOH,eAYxB,oBAAIvB,UAAU,WAAd,SACG1B,GACIA,EACAqD,QAAO,SAACjC,GACP,MAAkB,KAAd0B,EACK1B,EAEFA,EAAKoB,KACTc,cACAC,SAAST,EAAUU,wBAEvBrC,KAAI,SAACd,GAMJ,OALIiC,EAAa,EAAI,EACnBA,EAAa,EAEbA,GAAc,EAGd,cAAC,EAAD,CACEjC,QAASA,EAETiC,WAAYA,GADPjC,EAAQF,gBC0ClBsD,EA1EQ,WAAO,IAAD,EACWZ,mBAAS,IADpB,mBACpBa,EADoB,KACPC,EADO,KAErBC,EAAWC,cACT1D,EAAO2D,cAAP3D,GACR4D,qBAAU,WNVc,IAAC9D,EMWvB2D,GNXuB3D,EMWHE,ENXE,uCAAa,WAAOyD,GAAP,uBAAAxE,EAAA,sEAChBc,EAAeD,GADC,cAC/B+D,EAD+B,gBAElBA,EAFkB,OAE/BC,EAF+B,OAG/B5E,EAAYZ,IAEZyF,EAAYC,OAAOC,OAAOH,EAAKI,MAAMhF,GAAWW,YAChDsE,EAAcJ,EAAU/C,KAAI,SAACd,GAAD,MAAc,CAC9CF,GAAIE,EAAQF,GACZqC,KAAMnC,EAAQmC,KACd+B,aAAclE,EAAQkE,aACtBlD,gBAAiBhB,EAAQgB,gBACzBmD,QAASnE,EAAQmE,cAGjBZ,EAAS,CACP7D,KAAMK,EACNH,QAASqE,EAAY,KAhBY,4CAAb,0DMYrB,CAACV,EAAUzD,IAEd,IAAME,EAAUuC,aAAY,SAAC/C,GAAD,OAAWA,EAAMW,eAAeH,WAE5D,IAAKA,EACH,OAAO,KAXkB,IAanBmC,EAAmCnC,EAAnCmC,KAAMnB,EAA6BhB,EAA7BgB,gBAAiBmD,EAAYnE,EAAZmE,QAM/B,OACE,gCACE,8BACE,cAAC,EAAD,CAAQzC,YAAaS,MAEvB,sBAAKd,UAAU,cAAf,UACE,8BACE,cAAC,IAAD,CAAiBC,KAAMC,IAAeF,UAAU,eAElD,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,aAAd,SAA4Bc,IAC5B,iCACGnB,EACA,IAFH,2BAOJ,sBAAKK,UAAU,eAAf,UACE,qBAAKA,UAAU,UAAf,qCACA,uBAAOsB,YAAY,YAAYtB,UAAU,YAAYuB,MAAOS,EAAaR,SAxB1D,SAACC,GACpBQ,GAAe,kBAAMR,EAAEC,OAAOH,eAyB5B,sBAAKvB,UAAU,kBAAf,UACG8C,GAAWA,EACTnB,QAAO,SAACjC,GACP,MAAoB,KAAhBsC,EACKtC,EAEFA,EAAKoB,KACTc,cACAC,SAASG,EAAYF,wBAEzBrC,KAAI,SAACH,GAAD,OACH,sBAAKU,UAAU,kBAAf,UACE,qBAAKA,UAAU,YAAf,SAA4BV,EAAOwB,OACnC,sBAAKd,UAAU,QAAf,UACE,gCACGV,EAAOK,gBACP,IAFH,qBAKA,cAAC,IAAD,CAAiBM,KAAMY,WARWvB,EAAOb,QAY/CqE,EAAQC,QACR,oBAAI/C,UAAU,WAAd,kEChDKgD,MArBf,WAKE,OAJAX,qBAAU,WACRtD,EAAMmD,STJkB,uCAAM,WAAOA,GAAP,uBAAAxE,EAAA,sEACXD,IADW,cAC1B6E,EAD0B,gBAEbA,EAFa,OAE1BC,EAF0B,OAG1B5E,EAAYZ,IACZyF,EAAYC,OAAOC,OAAOH,EAAKI,MAAMhF,GAAWW,YAChD2E,EAAgBT,EAAU/C,KAAI,SAACd,GAAD,MAAc,CAChDF,GAAIE,EAAQF,GACZqC,KAAMnC,EAAQmC,KACd+B,aAAclE,EAAQkE,aACtBlD,gBAAiBhB,EAAQgB,sBAGzBuC,EAAS,CACP7D,KAAML,EACNO,QAAS0E,IAdmB,4CAAN,yDSKvB,IAGD,cAAC,IAAD,CAAUlE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmE,KAAK,IAAI3C,OAAK,EAArB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAO2C,KAAK,OAAZ,SACE,cAAC,EAAD,cCPGC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAQC,SAAUC,6BAAlB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.34a5e33d.chunk.js","sourcesContent":["export const dateFunc = () => {\n  const date = new Date();\n  const d = date.toLocaleDateString();\n  const day = d.split('/').reverse();\n  const b = day.splice(1, 1).join('');\n  day.push(b);\n\n  return day.join('-');\n};\n\nconst getCountriesData = async () => {\n  const todayDate = dateFunc();\n  const response = await fetch(\n    `https://api.covid19tracking.narrativa.com/api/${todayDate}`,\n  );\n  const dataResult = await response.json();\n  return dataResult;\n};\n\nexport default getCountriesData;\n","import getCountriesData, { dateFunc } from '../../API/GetCountriesData';\n\nconst GET_COUNTRIES = 'Covid_19_tracking_project/Countries/GET_COUNTRIES';\n\nconst initialState = [];\n\nexport const getCountries = () => async (dispatch) => {\n  const result = await getCountriesData();\n  const data = await result;\n  const todayDate = dateFunc();\n  const dataArray = Object.values(data.dates[todayDate].countries);\n  const countriesData = dataArray.map((country) => ({\n    id: country.id,\n    name: country.name,\n    today_deaths: country.today_deaths,\n    today_confirmed: country.today_confirmed,\n  }));\n  if (countriesData) {\n    dispatch({\n      type: GET_COUNTRIES,\n      payload: countriesData,\n    });\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","/* eslint-disable */\r\nexport const dateFunc = () => {\r\n  const date = new Date();\r\n  const d = date.toLocaleDateString();\r\n  const day = d.split('/').reverse();\r\n  const b = day.splice(1, 1).join('');\r\n  day.push(b);\r\n\r\n  return day.join('-');\r\n};\r\n\r\nconst getCountryData = async (id) => {\r\n  const todayDate = dateFunc();\r\n  const response = await fetch(\r\n    `https://api.covid19tracking.narrativa.com/api/${todayDate}/country/${id}`\r\n  );\r\n  return response.json();\r\n};\r\n\r\nexport default getCountryData;\r\n","import getCountryData, { dateFunc } from '../../API/GetCountryData';\n\nconst GET_COUNTRY = 'Covid_19_tracking_project/Country/GET_COUNTRY';\n\nconst initialState = [];\n\nexport const getCountry = (payload) => async (dispatch) => {\n  const result = await getCountryData(payload);\n  const data = await result;\n  const todayDate = dateFunc();\n\n  const dataArray = Object.values(data.dates[todayDate].countries);\n  const countryData = dataArray.map((country) => ({\n    id: country.id,\n    name: country.name,\n    today_deaths: country.today_deaths,\n    today_confirmed: country.today_confirmed,\n    regions: country.regions,\n  }));\n  if (countryData) {\n    dispatch({\n      type: GET_COUNTRY,\n      payload: countryData[0],\n    });\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COUNTRY:\n      return {\n        ...state,\n        country: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport countriesReducer from './countries/Countries';\nimport countryReducer from './country/country';\n\nconst reducer = combineReducers({\n  countriesReducer,\n  countryReducer,\n});\n\nconst store = createStore(reducer, applyMiddleware(logger, thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobeEurope } from '@fortawesome/free-solid-svg-icons';\n\nconst CountryHeader = (props) => {\n  const { region } = props;\n\n  let totalConfirmedCases = 0;\n  const totalCases = region\n    && region.map((item) => {\n      if (item.today_confirmed) {\n        totalConfirmedCases += item.today_confirmed;\n      }\n      return totalConfirmedCases;\n    });\n\n  const addTotalCases = totalCases\n    && totalCases.reduce((initial, element) => initial + element, 0);\n\n  return (\n    <div className=\"countryHeader\">\n      <div className=\"imgWrap\">\n        <FontAwesomeIcon icon={faGlobeEurope} className=\"imgCover\" />\n      </div>\n      <div className=\"headerTextWrap\">\n        <div className=\"headerText\">\n          <p className=\"bigHeading\">All Countries with Covid-19 cases</p>\n          <span>\n            {addTotalCases}\n            {' '}\n            confirmed cases\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCountryHeader.propTypes = {\n  region: PropTypes.arrayOf(PropTypes.object),\n};\n\nCountryHeader.defaultProps = {\n  region: [],\n};\n\nexport default CountryHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faAngleLeft,\n  faCog,\n  faMicrophoneAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n  const { countryName } = props;\n\n  return (\n    <header className=\"appHeader\">\n      <div className=\"headerFlex\">\n        <div className=\"headerItems\">\n          <Link to=\"/\" exact={`${true}`} className=\"regionLink\">\n            <FontAwesomeIcon icon={faAngleLeft} className=\"fontawesome\" />\n          </Link>\n          <span>2021</span>\n        </div>\n        <div>\n          {countryName && <span>{countryName}</span>}\n          {!countryName && <span>All Countries Data</span>}\n        </div>\n        <div className=\"headerItems\">\n          <FontAwesomeIcon icon={faMicrophoneAlt} />\n          <FontAwesomeIcon icon={faCog} />\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  countryName: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  countryName: '',\n};\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowCircleRight,\n  faGlobeEurope,\n} from '@fortawesome/free-solid-svg-icons';\n\nconst SelectCountry = (props) => {\n  const { country, cardNumber } = props;\n  return (\n    <div\n      className={\n        cardNumber === 2 || cardNumber === 3 ? 'coloredCard' : 'plainCard'\n      }\n    >\n      <div className=\"countryMap\">\n        <FontAwesomeIcon icon={faGlobeEurope} className=\"map\" />\n        <div className=\"selectCountry\">\n          <Link to={`${country.id}`} className=\"regionLink\">\n            <FontAwesomeIcon icon={faArrowCircleRight} />\n          </Link>\n          <div className=\"countryStat\">\n            <div className=\"bigHeading\">{country.name}</div>\n            <div>\n              {country.today_confirmed}\n              {' '}\n              cases\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSelectCountry.propTypes = {\n  country: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    today_confirmed: PropTypes.number,\n  }),\n  cardNumber: PropTypes.number,\n};\n\nSelectCountry.defaultProps = {\n  country: PropTypes.shape({\n    id: '',\n  }),\n  cardNumber: 0,\n};\n\nexport default SelectCountry;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport CountryHeader from './CountryHeader';\nimport Header from './Header';\nimport SelectCountry from './SelectCountry';\n\nconst Main = () => {\n  let cardNumber = 0;\n  const countries = useSelector((state) => state.countriesReducer.countries);\n  const [searchBar, setSearchBar] = useState('');\n\n  const handleChange = (e) => {\n    setSearchBar(() => e.target.value);\n  };\n\n  return (\n    <div className=\"appWrap\">\n      <Header />\n      <div>\n        <CountryHeader region={countries} />\n        <div className=\"countrySearch\">\n          <div className=\"countries\">stats by country - 2021</div>\n          <input placeholder=\"Search...\" className=\"searchBar\" value={searchBar} onChange={handleChange} />\n        </div>\n        <ul className=\"mainGrid\">\n          {countries\n            && countries\n              .filter((item) => {\n                if (searchBar === '') {\n                  return item;\n                }\n                return item.name\n                  .toLowerCase()\n                  .includes(searchBar.toLocaleLowerCase());\n              })\n              .map((country) => {\n                if (cardNumber + 1 > 4) {\n                  cardNumber = 1;\n                } else {\n                  cardNumber += 1;\n                }\n                return (\n                  <SelectCountry\n                    country={country}\n                    key={country.id}\n                    cardNumber={cardNumber}\n                  />\n                );\n              })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowCircleRight,\n  faGlobeEurope,\n} from '@fortawesome/free-solid-svg-icons';\nimport { getCountry } from '../redux/country/country';\nimport Header from './Header';\n\nconst CountryDetails = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  useEffect(() => {\n    dispatch(getCountry(id));\n  }, [dispatch, id]);\n\n  const country = useSelector((state) => state.countryReducer.country);\n\n  if (!country) {\n    return null;\n  }\n  const { name, today_confirmed, regions } = country;\n\n  const handleChange = (e) => {\n    setSearchValue(() => e.target.value);\n  };\n\n  return (\n    <div>\n      <div>\n        <Header countryName={name} />\n      </div>\n      <div className=\"eachCountry\">\n        <div>\n          <FontAwesomeIcon icon={faGlobeEurope} className=\"imgCover\" />\n        </div>\n        <div className=\"eachCountryHead\">\n          <h1 className=\"bigHeading\">{name}</h1>\n          <span>\n            {today_confirmed}\n            {' '}\n            confirmed cases\n          </span>\n        </div>\n      </div>\n      <div className=\"regionSearch\">\n        <div className=\"regions\">region breakdown - 2021</div>\n        <input placeholder=\"Search...\" className=\"searchBar\" value={searchValue} onChange={handleChange} />\n      </div>\n      <div className=\"eachCountryGrid\">\n        {regions && regions\n          .filter((item) => {\n            if (searchValue === '') {\n              return item;\n            }\n            return item.name\n              .toLowerCase()\n              .includes(searchValue.toLocaleLowerCase());\n          })\n          .map((region) => (\n            <div className=\"eachCountryCard\" key={region.id}>\n              <div className=\"bgHeading\">{region.name}</div>\n              <div className=\"cases\">\n                <div>\n                  {region.today_confirmed}\n                  {' '}\n                  confirmed cases\n                </div>\n                <FontAwesomeIcon icon={faArrowCircleRight} />\n              </div>\n            </div>\n          ))}\n        {!regions.length && (\n          <h1 className=\"errorMsg\">\n            There&apos;re no listed regions for this country!!\n          </h1>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CountryDetails;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/ConfigureStore';\nimport Main from './components/Main';\nimport { getCountries } from './redux/countries/Countries';\nimport CountryDetails from './components/CountryDetails';\n\nfunction App() {\n  useEffect(() => {\n    store.dispatch(getCountries());\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Main />\n          </Route>\n          <Route path=\"/:id\">\n            <CountryDetails />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}